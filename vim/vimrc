" vim: set foldmethod=marker:
"----- base setting -----
"base settings{{{
"Bundle{{{
set nocompatible
filetype off

if has('vim_starting')
  let s:neobundle_dir = '~/.vim/bundle/neobundle.vim'
  if finddir(s:neobundle_dir) == ''
    execute '!git clone https://github.com/Shougo/neobundle.vim.git ' . s:neobundle_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:neobundle_dir, ':p')
endif

call neobundle#begin(expand('~/.vim/bundle/'))

if neobundle#load_cache()
  NeoBundleFetch 'Shougo/neobundle.vim'
  call neobundle#load_toml('~/.vim/neobundle.toml')
  call neobundle#load_toml('~/.vim/neobundlelazy.toml', {'lazy' :1} )
  NeoBundleSaveCache
endif

call neobundle#end()
syntax on
filetype plugin indent on
NeoBundleCheck
"}}}
"基本設定{{{
let OSTYPE = system('uname')
if OSTYPE == "Darwin\n"
  let $PATH = $PATH.':/usr/local/bin/'
  if exists('+macmeta')
    set macmeta
  endif
endif
" encording
set fileencodings=ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,utf-8,sjis,cp932
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
"set fileencodings=utf-8
set clipboard=unnamed,autoselect
set iminsert=0
set imsearch=0
"set imdisable
set iskeyword=@,48-57,_,128-167,224-235
set backspace=indent,eol,start
set visualbell t_vb=

set incsearch
set ignorecase   " 検索時に大文字小文字を無視
set smartcase    " 大文字小文字の両方が含まれている場合は大文字小文字を区別
set wrapscan        " 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
"set grepprg=ack\ -a
set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f
set grepprg=grep\ -nH
set hlsearch

set tabstop=2        " タブの画面上での幅
set expandtab      " タブをスペースに展開しない
set shiftwidth=2    " autoindentなどの時のタブ幅
set softtabstop=2
set smartindent
set autoindent
set showmatch        " 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)

"viminfo // see :help 23.1
"set viminfo='1000,f1,<500,s100
"set viminfo+=n~/tmp/viminfo
"set backspace=2    " バックスペースでインデントや改行を削除できるようにする
"set showmode
set wildmenu        " コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmode=list:full,full " コマンドライン補完をシェルっぽくする
"set formatoptions+=mM   " テキスト挿入中の自動折り返しを日本語に対応させる
"自動折り返し切りたいのだが...
"set textwidth=0
set formatoptions=q
set number
set list        " タブや改行を表示 (list:表示)
set listchars=tab:>-,extends:<,trail:-,eol:$ " どの文字でタブや改行を表示するかを設定
set wrap          " 長い行を折り返して表示
set noruler
set cmdheight=2    " コマンドラインの高さ
"set showcmd        " コマンドをステータス行に表示
"set title          " タイトルを表示
" statusline
set laststatus=2  " 常にステータス行を表示
set statusline=path:%F%m%r%h%w%=%L[enc:%{&fileencoding}][ff:%{&ff}]
" tabline
set showtabline=2

set autoread     "他で書き換えられた場合、自動で読みなおす
set noswapfile
set nobackup     " バックアップファイルを作成しない
set ambiwidth=double
"set formatexpr=Format_Japanese()
set helplang=ja
set history=50
set splitbelow
set splitright
set virtualedit+=block " 矩形選択で行末を超えてブロックを選択できるようにする
set foldmethod=marker

autocmd BufReadPost *.txt,*.memo |
  \ set foldmethod=indent |
set foldopen=hor,search,insert,jump,tag
"set foldclose=all
set modeline

"undo file
set noundofile
"ctags
set tags=./tags;
"ファイル読み込み時にhighlightしない
noh
"}}}
" colorscheme{{{
if filereadable(expand("~/.vim/colors/mycolor.vim"))
  colorscheme mycolor
else
  colorscheme elflord
endif
"}}}
"}}}
"----- keymapping -----
"keymap{{{
"normal-mode{{{
"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap <C-h> hx
nnoremap <S-h> 0
nnoremap <S-l> $
nnoremap <C-g> gT
nnoremap <C-c> gt
" 行頭/行末へ移動
"nnoremap <C-a> 0
nnoremap <C-e> <S-$>
" Ctrl+Nで次のバッファを表示
nnoremap <C-N>   :bnext<CR>
" Ctrl+Pで前のバッファを表示
nnoremap <C-P>   :bprevious<CR>
nnoremap <C-j> <C-]>
nnoremap g<C-j> g<C-]>
" tmuxのプレフィックスとかぶるので
nnoremap <C-f> <nop>
" 数値を増やす
nnoremap <S-a> <C-a>
nnoremap <S-x> <C-x>

nnoremap <space>w :w<CR>
nnoremap <space>q :q<CR>
" タブを開く
"nnoremap t :tabe<space>
" vimrcを編集・読み込み
nnoremap .. :tabe ~/.vimrc<CR>
nnoremap ,, :source ~/.vimrc<CR>
nnoremap <silent>;w :set nowrap!<CR>
nnoremap <silent>;n :set nonumber!<CR>
nnoremap <silent>;a :append!<CR>
nnoremap <silent>;l :noh<CR>
nnoremap -- 78i-<esc>o<esc>
"folding {{{
"noremap [space] <nop>
"nmap <space> [space]
nnoremap <space>j zj
nnoremap <space>k zk
nnoremap <space>n ]z
nnoremap <space>p [z
nnoremap <space>h zc
nnoremap <space>l zo
nnoremap <space><space> za
nnoremap <space>a za
nnoremap <space>m zM
nnoremap <space>i zMzv
nnoremap <space>r zR
nnoremap <space>f zf
nnoremap zd <nop>
nnoremap zD <nop>
nnoremap zE <nop>
"}}}
"plugin {{{
nnoremap cs :Csvhl<space>
"unite
nnoremap <silent> ,y :<C-u>Unite history/yank<CR>
"firefox
nnoremap ,f :!open -a firefox % >/dev/null<CR>
if OSTYPE == "Darwin\n"
  nnoremap <space>/ g/
endif
nnoremap ,ag :Ag<space>
"}}}
"}}}
"insert-mode{{{
inoremap <C-j> <Esc>
inoremap <C-k> <CR>
inoremap {} {}<Left>
inoremap [] []<Left>
inoremap () ()<Left>
inoremap <> <><Left>
inoremap "" ""<Left>
inoremap '' ''<Left>
inoremap `` ``<Left>
inoremap /* /*  */<Left><Left><Left>
inoremap <C-l> ->
inoremap <M-l> =>

"inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
"inoremap <C-k> <CR>
"snipet
"imap <C-k> <Plug>(neocomplcache_snippets_expand)
"}}}
"commandline-mode{{{
cnoremap <C-A> <HOME>
cnoremap <C-e> <End>
cnoremap <C-k> <CR>
cnoremap <C-j> <ESC>
"}}}
"visual-mode{{{
vnoremap <C-j> <esc>
vnoremap <S-l> $
vnoremap <S-h> 0
"行末に挿入
vnoremap <S-a> $<S-a>
vnoremap * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>
"}}}
"}}}
"----- other setting -----
"other setting{{{
"ファイルの閉じた場所を記憶{{{
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
"}}}
" 行のURLを開く{{{
function! HandleURI()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  if s:uri != ""
    echo s:uri
    exec "silent :w !open \"" . s:uri . "\""
  else
    echo "No URI found in line."
  endif
endfunction
map <Leader>f :call HandleURI()<CR>
"}}}
" binary mode {{{
augroup BinaryXXD
  au!
  au BufReadPre *.bin let &binary = 1
  au BufReadPost * if &binary | silent %!xxd -g 1
  au BufReadPost * setl ft=xxd | endif
  au BufWritePre * if &binary | %!xxd -r | endif
  au BufWritePost * if &binary | silent %!xxd -g 1
  au BufWritePost * setl nomod | endif
augroup END
"}}}
let g:auto_ctags_bin_path = '/usr/local/bin/ctags'
autocmd FileType help noremap <buffer><silent> q :bd<CR>
autocmd BufRead ~/.vimperator/conf/* setl ft=vimperator
" for scss
autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}
"}}}
"----- other setting -----
"others{{{
set runtimepath+=~/.vim/
runtime! others/*.vim
"}}}

let s:bundles = '~/.vim/neobundle.toml'
let s:bundle_lazys = '~/.vim/neobundlelazy.toml'
function! s:bundle_add(repository, ...)
  let lazy = 0
  for var in a:000
    if var == 'lazy'
      let lazy = 1
    endif
  endfor
  execute "redir! >> " . fnamemodify(lazy ? s:bundle_lazys : s:bundles, ':p')
    silent! echon "\n[[plugins]]"
    silent! echon "\nrepository = \'" . a:repository . "\'"
  redir END
endfunction
command! -nargs=* BundleAdd call s:bundle_add(<f-args>)
" ローカル設定の読み込み
if filereadable(expand('~/.vim/vimrc.local'))
  source ~/.vim/vimrc.local
endif
