[[plugins]] #{{{ prettier/vim-prettier
repo = 'prettier/vim-prettier'
on_ft = ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'vue']
hook_source = """
let g:prettier#autoformat = 0
let g:prettier#config#single_quote = 'false'
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue PrettierAsync
"""
#}}}

[[plugins]] #{{{ evidens/vim-twig
repo = 'evidens/vim-twig'
on_ft = 'twig'
#}}}

[[plugins]] #{{{ cespare/vim-toml
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

[[plugins]] #{{{ mattn/emmet-vim
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'eruby']
hook_source = """
let g:user_emmet_expandabbr_key = '<C-@>'
let g:user_emmet_leader_key = '<C-i>'
let g:user_emmet_install_global = 0
autocmd! FileType html,css,eruby,php EmmetInstall
"""
#}}}

[[plugins]] #{{{ plasticboy/vim-markdown
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'vimwiki']
#}}}

[[plugins]] #{{{ fatih/vim-go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_source = """
augroup GO_load
  au!
  au FileType godoc nnoremap <buffer><silent> q :bd<CR>
  au FileType go setl noexpandtab
  au FileType go setl tabstop=4
  au FileType go setl shiftwidth=4
  au FileType go setl softtabstop=4
  au FileType go hi SpecialKey term=underline ctermfg=234 ctermbg=233 guifg=grey30 guibg=grey20
augroup END
"""
#}}}

[[plugins]] # {{{ Shougo/deoplete.nvim
repo = 'Shougo/deoplete.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = """
" pip3 install --user pynvim --upgrade
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#auto_completion_start_length      = 2
let g:deoplete#enable_fuzzy_completion           = 0
let g:deoplete#max_list                          = 20
let g:deoplete#sources#syntax#min_keyword_length = 3
let g:deoplete#lock_buffer_name_pattern          = '\*ku\*'
let g:deoplete#sources#buffer#cache_limit_size   = 50000
"let g:deoplete#data_directory                    = '/tmp/deoplete.vim'
let g:deoplete#enable_underbar_completion        = 1
let g:deoplete#enable_camel_case_completion      = 1
let g:deoplete#sources#buffer#max_keyword_width  = 80
" Define dictionary.
let g:deoplete#sources#dictionary#dictionaries   = {
    \ 'default' : '',
    \ 'php' : $HOME.'/.vim/dict/php.dict'
    \ }

"au InsertLeave * silent! pclose!
" Define keyword.
if !exists('g:deoplete#keyword_patterns')
    let g:deoplete#keyword_patterns = {}
endif
let g:deoplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     deoplete#undo_completion()
inoremap <expr><C-l>     deoplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return deoplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? deoplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h>  deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>   deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  deoplete#close_popup()
inoremap <expr><C-e>  deoplete#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:deoplete#sources#omni#input_patterns')
  let g:deoplete#sources#omni#input_patterns = {}
endif
"let g:deoplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:deoplete#sources#omni#input_patterns.go = '\h\w\.\w*'

if !exists('g:deoplete#force_omni_input_patterns')
  let g:deoplete#force_omni_input_patterns = {}
endif
"let g:deoplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:deoplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'

" for neco-look
if !exists('g:deoplete#text_mode_filetypes')
  let g:deoplete#text_mode_filetypes = {}
endif
let g:deoplete#text_mode_filetypes = {
    \ 'rst': 1,
    \ 'markdown': 1,
    \ 'gitrebase': 1,
    \ 'gitcommit': 1,
    \ 'vcs-commit': 1,
    \ 'hybrid': 1,
    \ 'text': 1,
    \ 'help': 1,
    \ 'tex': 1,
    \ 'vimwiki': 1
    \}
"""
#}}}

[[plugins]] # {{{ roxma/nvim-yarp
repo = 'roxma/nvim-yarp'
#}}}

[[plugins]] # {{{ roxma/vim-hug-neovim-rpc
repo = 'roxma/vim-hug-neovim-rpc'
#}}}

[[plugins]] # {{{ ujihisa/neco-look
repo = 'ujihisa/neco-look'
on_i = 1
#}}}

[[plugins]] #{{{ Shougo/neco-syntax
repo = 'Shougo/neco-syntax'
on_i = 1
#}}}

[[plugins]] #{{{ Shougo/neosnippet
repo = 'Shougo/neosnippet'
on_i = 1
hook_source="""
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
 
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippet'
"""
#}}}

[[plugins]] #{{{ Shougo/neosnippet-snippets
repo = 'Shougo/neosnippet-snippets'
on_i = 1
#}}}

[[plugins]] #{{{ lambdalisue/vim-gista
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']
on_func = 'gista#'
#}}}

[[plugins]] #{{{ Shougo/vimfiler.vim
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_source="""
augroup MyVimFiler
  au!
  autocmd FileType vimfiler nmap <buffer> s <Plug>(vimfiler_toggle_mark_current_line)
  autocmd FileType vimfiler setlocal nonumber
augroup END
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_min_filename_width = 10
"let g:vimfiler_edit_action = 'tabopen'
let g:vimfiler_data_directory = '/tmp/.vimfiler'
"autocmd FileType vimfiler :map O <Plug>(vimfiler_double_click)
"""
#}}}

[[plugins]] #{{{ tobyS/pdv
repo = 'tobyS/pdv'
on_ft = ['php']
#}}}

[[plugins]] #{{{ tobyS/vmustache
repo = 'tobyS/vmustache'
on_ft = ['php']
#}}}

#[[plugins]]
#repo = 'tpope/vim-rails'
#on_ft = ['ruby']

[[plugins]] #{{{ mustache/vim-mustache-handlebars
repo = 'mustache/vim-mustache-handlebars'
on_ft = ['mustache']
#}}}

[[plugins]] #{{{ tmhedberg/matchit
repo = 'tmhedberg/matchit'
on_ft = ['html', 'php']
#}}}

[[plugins]] # {{{ vim-scripts/textutil.vim
repo = 'vim-scripts/textutil.vim'
on_ft = ['rtf']
#}}}

[[plugins]] # {{{ swekaj/php-foldexpr.vim
repo = 'swekaj/php-foldexpr.vim'
on_ft = ['php']
#}}}

#[[plugins]]
#repo = 'lvht/phpcd.vim'
#on_ft = ['php']
#build = ['composer install']
#

[[plugins]] # {{{ chrisbra/csv.vim
repo = 'chrisbra/csv.vim'
on_ft = ['csv']
hook_source = """
function! CSVH(x)
    execute 'match Keyword /^\([^,]*,\)\{'.a:x.'}\zs[^,]*/'
    execute 'normal ^'.a:x
endfunction
command! -nargs=1 Csvhl :call CSVH(<args>)

autocmd BufNewFile,BufRead *.csv set nowrap
"""
#}}}

[[plugins]] # {{{ leafgarland/typescript-vim
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
#}}}

[[plugins]] # {{{ dense-analysis/ale
repo = 'dense-analysis/ale'
on_ft = ['php', 'javascript', 'vue']
hook_source = """
let g:ale_sign_column_always = 1
let g:ale_php_phpcs_standard = 'PSR1,PSR2'
let g:ale_linters = {
  \ 'php': ['phpcs', 'php'],
  \ 'javascript': ['eslint'],
  \ 'vue': ['eslint']
  \}
let g:ale_php_phpcs_options = '--config=./.php_cs.dist'
let g:ale_fixers = {
\   'php': ['php_cs_fixer'],
\   'javascript': ['eslint'],
\   'vue': ['eslint'],
\}
let g:ale_fix_on_save = 1
autocmd BufEnter vendor/*.php let b:ale_fix_on_save = 0
let g:ale_completion_enable = 1
setl omnifunc=ale#completion#OmniFunc
"""
#}}}

[[plugins]] #{{{ vim-vdebug/vdebug
repo = 'vim-vdebug/vdebug'
on_ft = ['php']
hook_add = """
let g:vdebug_options= {
\    "port" : 9000,
\    "server" : '',
\    "timeout" : 20,
\    "on_close" : 'detach',
\    "break_on_open" : 0,
\    "ide_key" : '',
\    "path_maps" : {},
\    "debug_window_level" : 0,
\    "debug_file_level" : 0,
\    "debug_file" : "",
\    "watch_window_style" : 'expanded',
\    "marker_default" : '⬦',
\    "marker_closed_tree" : '▸',
\    "marker_open_tree" : '▾',
\    "sign_breakpoint" : '>>',
\    "sign_current" : '>',
\    "sign_disabled" : '||',
\}
let g:vdebug_keymap = {
\    "run" : "<F5>",
\    "run_to_cursor" : "<F9>",
\    "step_over" : "<F2>",
\    "step_into" : "<F3>",
\    "step_out" : "<F4>",
\    "close" : "<F6>",
\    "detach" : "<F7>",
\    "set_breakpoint" : "<F10>",
\    "get_context" : "<F11>",
\    "eval_under_cursor" : "<F12>",
\    "eval_visual" : "<Leader>e",
\}
"""
#}}}

[[plugins]] #{{{ phpactor/phpactor
repo = 'phpactor/phpactor'
on_ft = 'php'
build = 'composer install'
hook_source="""
let g:phpactorOmniAutoClassImport = v:true
autocmd FileType php setlocal omnifunc=phpactor#Complete
function! PhpactorGotoDefinition() abort
  split
  call phpactor#GotoDefinition()
endfunction
"au! InsertEnter *.php call phpactor#Hover()
nmap <buffer><silent><Leader>hh     :<C-u>call phpactor#Hover()<CR>
nmap <buffer><silent><Leader>u      :<C-u>call phpactor#UseAdd()<CR>
nmap <buffer><silent><Leader>mm     :<C-u>call phpactor#ContextMenu()<CR>
nmap <buffer><C-j>                  :call PhpactorGotoDefinition()<CR>
nmap <buffer><C-t>                  <C-o>
"""
#}}}

[[plugins]] #{{{ kristijanhusak/deoplete-phpactor
repo = 'kristijanhusak/deoplete-phpactor'
on_ft = 'php'
depends = ['phpactor', 'deoplete.nvim']
#}}}

[[plugins]] #{{{ posva/vim-vue
repo = 'posva/vim-vue'
on_ft = 'vue'
#}}}
