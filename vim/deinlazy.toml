#[[plugins]] #{{{ prettier/vim-prettier
#repo = 'prettier/vim-prettier'
#on_ft = ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'vue']
#hook_source = """
#let g:prettier#autoformat = 0
#let g:prettier#config#single_quote = 'false'
#autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue PrettierAsync
#"""
##}}}

[[plugins]] #{{{ cespare/vim-toml
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

[[plugins]] #{{{ mattn/emmet-vim
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'eruby', 'vue']
hook_source = """
let g:user_emmet_expandabbr_key = '<C-@>'
let g:user_emmet_leader_key = '<C-i>'
let g:user_emmet_install_global = 0
autocmd! FileType html,css,eruby,php,vue EmmetInstall
"""
#}}}

[[plugins]] #{{{ plasticboy/vim-markdown
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'vimwiki']
#}}}

[[plugins]] # {{{ roxma/nvim-yarp
repo = 'roxma/nvim-yarp'
#}}}

[[plugins]] # {{{ roxma/vim-hug-neovim-rpc
repo = 'roxma/vim-hug-neovim-rpc'
#}}}

[[plugins]] # {{{ ujihisa/neco-look
repo = 'ujihisa/neco-look'
on_i = 1
#}}}

[[plugins]] #{{{ Shougo/neco-syntax
repo = 'Shougo/neco-syntax'
on_i = 1
#}}}

[[plugins]] #{{{ Shougo/neosnippet
repo = 'Shougo/neosnippet'
on_i = 1
hook_source="""
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
 
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippet'
"""
#}}}

[[plugins]] #{{{ Shougo/neosnippet-snippets
repo = 'Shougo/neosnippet-snippets'
on_i = 1
#}}}

[[plugins]] #{{{ lambdalisue/vim-gista
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']
on_func = 'gista#'
#}}}

[[plugins]] #{{{ Shougo/vimfiler.vim
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_source="""
augroup MyVimFiler
  au!
  autocmd FileType vimfiler nmap <buffer> s <Plug>(vimfiler_toggle_mark_current_line)
  autocmd FileType vimfiler setlocal nonumber
augroup END
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_min_filename_width = 10
"let g:vimfiler_edit_action = 'tabopen'
let g:vimfiler_data_directory = '/tmp/.vimfiler'
"autocmd FileType vimfiler :map O <Plug>(vimfiler_double_click)
"""
#}}}

[[plugins]] #{{{ tobyS/pdv
repo = 'amashigeseiji/pdv' #forked from tobyS/pdv
on_ft = ['php']
hook_source = '''
let g:pdv_template_dir = $HOME ."/.vim/pdv/templates"
nnoremap <buffer> <S-p> :call pdv#DocumentCurrentLine()<CR>
'''
#}}}

[[plugins]] #{{{ tobyS/vmustache
repo = 'tobyS/vmustache'
on_ft = ['php']
#}}}

[[plugins]] #{{{ mustache/vim-mustache-handlebars
repo = 'mustache/vim-mustache-handlebars'
on_ft = ['mustache']
#}}}

[[plugins]] #{{{ tmhedberg/matchit
repo = 'tmhedberg/matchit'
on_ft = ['html', 'php']
#}}}

[[plugins]] # {{{ vim-scripts/textutil.vim
repo = 'vim-scripts/textutil.vim'
on_ft = ['rtf']
#}}}

[[plugins]] # {{{ chrisbra/csv.vim
repo = 'chrisbra/csv.vim'
on_ft = ['csv']
hook_source = """
function! CSVH(x)
    execute 'match Keyword /^\([^,]*,\)\{'.a:x.'}\zs[^,]*/'
    execute 'normal ^'.a:x
endfunction
command! -nargs=1 Csvhl :call CSVH(<args>)

autocmd BufNewFile,BufRead *.csv set nowrap
"""
#}}}

[[plugins]] # {{{ leafgarland/typescript-vim
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
#}}}

[[plugins]] # {{{ dense-analysis/ale
repo = 'dense-analysis/ale'
on_ft = ['php', 'javascript', 'vue']
hook_source = """
let g:ale_sign_column_always = 1
let g:ale_php_phpcs_standard = 'PSR1,PSR2'
let g:ale_php_phpstan_executable = expand('~/.composer/vendor/bin/phpstan')
let g:ale_linters = {
  \ 'php': ['phpcs', 'php', 'phpstan'],
  \ 'javascript': ['eslint'],
  \ 'vue': ['eslint']
  \}
let g:ale_php_phpcs_options = '--config=./.php_cs.dist'
let g:ale_fixers = {
\   'php': ['php_cs_fixer'],
\   'javascript': ['eslint'],
\   'vue': ['eslint'],
\}
let g:ale_fix_on_save = 1
autocmd BufEnter vendor/*.php let b:ale_fix_on_save = 0
let g:ale_completion_enable = 1
setl omnifunc=ale#completion#OmniFunc
"""
#}}}

[[plugins]] #{{{ vim-vdebug/vdebug
repo = 'vim-vdebug/vdebug'
on_ft = ['php']
hook_add = """
let g:vdebug_options= {
\    "port" : 9000,
\    "server" : '',
\    "timeout" : 20,
\    "on_close" : 'detach',
\    "break_on_open" : 0,
\    "ide_key" : '',
\    "path_maps" : {},
\    "debug_window_level" : 0,
\    "debug_file_level" : 0,
\    "debug_file" : "",
\    "watch_window_style" : 'expanded',
\    "marker_default" : '⬦',
\    "marker_closed_tree" : '▸',
\    "marker_open_tree" : '▾',
\    "sign_breakpoint" : '>>',
\    "sign_current" : '>',
\    "sign_disabled" : '||',
\}
let g:vdebug_keymap = {
\    "run" : "<F5>",
\    "run_to_cursor" : "<F9>",
\    "step_over" : "<F2>",
\    "step_into" : "<F3>",
\    "step_out" : "<F4>",
\    "close" : "<F6>",
\    "detach" : "<F7>",
\    "set_breakpoint" : "<F10>",
\    "get_context" : "<F11>",
\    "eval_under_cursor" : "<F12>",
\    "eval_visual" : "<Leader>e",
\}
"""
#}}}

[[plugins]] #{{{ posva/vim-vue
repo = 'posva/vim-vue'
on_ft = 'vue'
#}}}

[[plugins]] #{{{ rhysd/reply.vim
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']
#}}}
